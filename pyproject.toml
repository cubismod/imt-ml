# ---- Project Info and Dependencies ----

[project.urls]
Repository = "https://github.com/cubismod/imt-ml"
# Homepage = "https://..."
# Documentation = "https://..."

[project]
name = "imt-ml"
description = "Machine learning tooling for the inky mbta tracker"
authors = [
    { name="Ryan Wallace", email="git@hexa.mozmail.com" },
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.11,<4.0"
dynamic = ["version"]

# https://pypi.org/classifiers/
# Adjust as needed:
classifiers = [
    # Adjust as needed:
    "Development Status :: 4 - Beta",
    # "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
    # Include this to avoid accidentally publishing to PyPI:
    # "Private :: Do Not Upload",
]


# ---- Main dependencies ----

dependencies = [
    "pydantic>=2.11.7",
    "redis>=6.2.0",
    "tensorflow>=2.19.0",
]


# ---- Dev dependencies ----

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-sugar>=1.0.0",
    "ruff>=0.11.9",
    "codespell>=2.4.1",
    "rich>=14.0.0",
    "mypy>=1.13.0",
    "funlog>=0.2.1",
]

[project.scripts]
# Add script entry points here:
export-track-data = "imt_ml.export_track_data:run"


# ---- Build system ----

# Dynamic versioning from:
# https://github.com/ninoseki/uv-dynamic-versioning/

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"
# Note JSON schemas don't seem to be right for tool.hatch.version.source so
# this may cause false warnings in IDEs.
# https://github.com/ninoseki/uv-dynamic-versioning/issues/21

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = "true"

[tool.hatch.build.targets.wheel]
# The source location for the package.
packages = ["src/imt_ml"]


# ---- Settings ----


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I", ]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.mypy]
# Mypy configuration
python_version = "3.11"
files = ["src", "tests", "devtools"]
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Allow some untyped defs for TensorFlow/ML code
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false  # TensorFlow has many dynamic types
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true  # Ignore missing stubs for ML libraries
show_error_codes = true

[tool.codespell]
# Add here as needed:
# ignore-words-list = "foo,bar"
# skip = "foo.py,bar.py"

[tool.pytest.ini_options]
python_files = ["*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = [
    "src",
    "tests",
]
norecursedirs = []
filterwarnings = []
