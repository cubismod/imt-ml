"""
Reporting utilities for training sessions.

This module handles creating timestamped output directories and generating
comprehensive training reports in markdown format.
"""

import os
from datetime import datetime
from typing import Any


def create_timestamped_output_dir(command_name: str, model_save_path: str) -> str:
    """Create a timestamped output directory and return the full model path."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

    # Allow override of output directory via environment variable
    base_output_dir = os.getenv("IMT_ML_OUTPUT_DIR", "output")
    output_subdir = f"{base_output_dir}/{command_name}_{timestamp}"
    os.makedirs(output_subdir, exist_ok=True)

    # If model_save_path is just a filename, use it directly
    # Otherwise extract just the filename part
    if "/" in model_save_path:
        model_filename = os.path.basename(model_save_path)
    else:
        model_filename = model_save_path

    full_path = f"{output_subdir}/{model_filename}"
    print(f"Model will be saved to {full_path}")
    return full_path


def generate_training_report(
    command_name: str,
    model_save_path: str,
    vocab_info: dict[str, Any],
    training_params: dict[str, Any],
    final_metrics: dict[str, float],
    training_time: float,
    additional_info: dict[str, Any] | None = None,
) -> None:
    """Generate a markdown report for the training session."""
    report_path = f"{os.path.dirname(model_save_path)}/training_report.md"

    # Get current timestamp for report
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    report_content = f"""# Training Report - {command_name.title()}

    Generated: {timestamp}

    ## Overview
    - **Command**: `{command_name}`
    - **Training Duration**: {training_time:.2f} seconds ({training_time / 60:.1f} minutes)
    - **Output Directory**: `{os.path.dirname(model_save_path)}`

    ## Dataset Information
    - **Total Records**: {vocab_info["metadata"]["total_records"]:,}
    - **Training Steps per Epoch**: {vocab_info["train_steps_per_epoch"]}
    - **Validation Steps per Epoch**: {vocab_info["val_steps_per_epoch"]}

    ### Vocabulary Sizes
    - **Stations**: {vocab_info["num_stations"]} unique stations
    - **Routes**: {vocab_info["num_routes"]} unique routes  
    - **Tracks**: {vocab_info["num_tracks"]} unique tracks (prediction targets)

    ## Training Configuration
    """

    # Add training parameters
    for param, value in training_params.items():
        report_content += f"- **{param.replace('_', ' ').title()}**: {value}\n"

    report_content += """

## Final Performance Metrics
"""

    # Add final metrics
    for metric, value in final_metrics.items():
        report_content += f"- **{metric.replace('_', ' ').title()}**: {value:.4f}\n"
       

    # Add additional information if provided
    if additional_info:
        report_content += "\n## Additional Information\n"
        for key, value in additional_info.items():
            if isinstance(value, dict):
                report_content += f"\n### {key.replace('_', ' ').title()}\n"
                for subkey, subvalue in value.items():
                    if isinstance(subvalue, float):
                        report_content += f"- **{subkey.replace('_', ' ').title()}**: {subvalue:.4f}\n"
                    else:
                        report_content += (
                            f"- **{subkey.replace('_', ' ').title()}**: {subvalue}\n"
                        )
            elif isinstance(value, list):
                report_content += f"- **{key.replace('_', ' ').title()}**: {', '.join(map(str, value))}\n"
            else:
                report_content += f"- **{key.replace('_', ' ').title()}**: {value}\n"

    # Add dataset details
    report_content += f"""

    ## Dataset Schema
    The model was trained on MBTA track assignment data with the following features:
    - **Categorical Features**: station_id, route_id, direction_id
    - **Temporal Features**: hour, minute, day_of_week (cyclically encoded)
    - **Target**: track_number (classification with {vocab_info["num_tracks"]} classes)

    ## Model Architecture
    - Embedding layers for categorical features
    - Cyclical time encoding (sin/cos) for temporal patterns
    - Dense layers with dropout regularization
    - Softmax output for multi-class track prediction

    ## Usage
    To load and use this model:

    ```python
    import keras
    model = keras.models.load_model('{os.path.basename(model_save_path)}_final.keras')
    ```

    ---
    *Report generated by imt-ml training pipeline*
    """

    # Write report to file
    with open(report_path, "w") as f:
        f.write(report_content)

    print(f"Training report saved to: {report_path}")
